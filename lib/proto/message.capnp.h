// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: message.capnp

#ifndef CAPNP_INCLUDED_f5750227d1666c0c_
#define CAPNP_INCLUDED_f5750227d1666c0c_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "game.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(dd7f31352958d3ba);
enum class Type_dd7f31352958d3ba: uint16_t {
  GIVE,
  RACE,
  TRADE,
  EXPLORE,
  SCORE,
};
CAPNP_DECLARE_ENUM(Type, dd7f31352958d3ba);
CAPNP_DECLARE_SCHEMA(db10198083e611f5);
CAPNP_DECLARE_SCHEMA(d73148dbe27838f1);
CAPNP_DECLARE_SCHEMA(d4e52546be6cad45);
CAPNP_DECLARE_SCHEMA(9848b086b32ceada);
CAPNP_DECLARE_SCHEMA(a7ee7e68e1334706);

}  // namespace schemas
}  // namespace capnp

namespace message {

typedef ::capnp::schemas::Type_dd7f31352958d3ba Type;

struct Message {
  Message() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Msg;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(db10198083e611f5, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Message::Msg {
  Msg() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    STATUS,
    SHIP,
    PART,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d73148dbe27838f1, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Status {
  Status() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d4e52546be6cad45, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Ship {
  Ship() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9848b086b32ceada, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Part {
  Part() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a7ee7e68e1334706, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Message::Reader {
public:
  typedef Message Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline typename Msg::Reader getMsg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Message::Builder {
public:
  typedef Message Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline typename Msg::Builder getMsg();
  inline typename Msg::Builder initMsg();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Message::Pipeline {
public:
  typedef Message Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Msg::Pipeline getMsg();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Message::Msg::Reader {
public:
  typedef Msg Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isStatus() const;
  inline bool hasStatus() const;
  inline  ::message::Status::Reader getStatus() const;

  inline bool isShip() const;
  inline bool hasShip() const;
  inline  ::message::Ship::Reader getShip() const;

  inline bool isPart() const;
  inline bool hasPart() const;
  inline  ::message::Part::Reader getPart() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Message::Msg::Builder {
public:
  typedef Msg Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isStatus();
  inline bool hasStatus();
  inline  ::message::Status::Builder getStatus();
  inline void setStatus( ::message::Status::Reader value);
  inline  ::message::Status::Builder initStatus();
  inline void adoptStatus(::capnp::Orphan< ::message::Status>&& value);
  inline ::capnp::Orphan< ::message::Status> disownStatus();

  inline bool isShip();
  inline bool hasShip();
  inline  ::message::Ship::Builder getShip();
  inline void setShip( ::message::Ship::Reader value);
  inline  ::message::Ship::Builder initShip();
  inline void adoptShip(::capnp::Orphan< ::message::Ship>&& value);
  inline ::capnp::Orphan< ::message::Ship> disownShip();

  inline bool isPart();
  inline bool hasPart();
  inline  ::message::Part::Builder getPart();
  inline void setPart( ::message::Part::Reader value);
  inline  ::message::Part::Builder initPart();
  inline void adoptPart(::capnp::Orphan< ::message::Part>&& value);
  inline ::capnp::Orphan< ::message::Part> disownPart();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Message::Msg::Pipeline {
public:
  typedef Msg Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Status::Reader {
public:
  typedef Status Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getFirmwareVersion() const;

  inline bool hasUser() const;
  inline  ::game::User::Reader getUser() const;

  inline  ::uint8_t getSite() const;

  inline bool hasPhase() const;
  inline  ::game::Phase::Reader getPhase() const;

  inline  ::uint16_t getScore() const;

  inline  ::uint16_t getReputation() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Status::Builder {
public:
  typedef Status Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getFirmwareVersion();
  inline void setFirmwareVersion( ::uint8_t value);

  inline bool hasUser();
  inline  ::game::User::Builder getUser();
  inline void setUser( ::game::User::Reader value);
  inline  ::game::User::Builder initUser();
  inline void adoptUser(::capnp::Orphan< ::game::User>&& value);
  inline ::capnp::Orphan< ::game::User> disownUser();

  inline  ::uint8_t getSite();
  inline void setSite( ::uint8_t value);

  inline bool hasPhase();
  inline  ::game::Phase::Builder getPhase();
  inline void setPhase( ::game::Phase::Reader value);
  inline  ::game::Phase::Builder initPhase();
  inline void adoptPhase(::capnp::Orphan< ::game::Phase>&& value);
  inline ::capnp::Orphan< ::game::Phase> disownPhase();

  inline  ::uint16_t getScore();
  inline void setScore( ::uint16_t value);

  inline  ::uint16_t getReputation();
  inline void setReputation( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Status::Pipeline {
public:
  typedef Status Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::game::User::Pipeline getUser();
  inline  ::game::Phase::Pipeline getPhase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Ship::Reader {
public:
  typedef Ship Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::message::Type getAction() const;

  inline bool hasShip() const;
  inline  ::game::Ship::Reader getShip() const;

  inline bool hasDest() const;
  inline  ::game::User::Reader getDest() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Ship::Builder {
public:
  typedef Ship Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::message::Type getAction();
  inline void setAction( ::message::Type value);

  inline bool hasShip();
  inline  ::game::Ship::Builder getShip();
  inline void setShip( ::game::Ship::Reader value);
  inline  ::game::Ship::Builder initShip();
  inline void adoptShip(::capnp::Orphan< ::game::Ship>&& value);
  inline ::capnp::Orphan< ::game::Ship> disownShip();

  inline bool hasDest();
  inline  ::game::User::Builder getDest();
  inline void setDest( ::game::User::Reader value);
  inline  ::game::User::Builder initDest();
  inline void adoptDest(::capnp::Orphan< ::game::User>&& value);
  inline ::capnp::Orphan< ::game::User> disownDest();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Ship::Pipeline {
public:
  typedef Ship Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::game::Ship::Pipeline getShip();
  inline  ::game::User::Pipeline getDest();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Part::Reader {
public:
  typedef Part Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::message::Type getAction() const;

  inline bool hasPart() const;
  inline  ::game::ShipPart::Reader getPart() const;

  inline  ::uint8_t getQuality() const;

  inline bool hasDest() const;
  inline  ::game::User::Reader getDest() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Part::Builder {
public:
  typedef Part Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::message::Type getAction();
  inline void setAction( ::message::Type value);

  inline bool hasPart();
  inline  ::game::ShipPart::Builder getPart();
  inline void setPart( ::game::ShipPart::Reader value);
  inline  ::game::ShipPart::Builder initPart();
  inline void adoptPart(::capnp::Orphan< ::game::ShipPart>&& value);
  inline ::capnp::Orphan< ::game::ShipPart> disownPart();

  inline  ::uint8_t getQuality();
  inline void setQuality( ::uint8_t value);

  inline bool hasDest();
  inline  ::game::User::Builder getDest();
  inline void setDest( ::game::User::Reader value);
  inline  ::game::User::Builder initDest();
  inline void adoptDest(::capnp::Orphan< ::game::User>&& value);
  inline ::capnp::Orphan< ::game::User> disownDest();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Part::Pipeline {
public:
  typedef Part Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::game::ShipPart::Pipeline getPart();
  inline  ::game::User::Pipeline getDest();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline typename Message::Msg::Reader Message::Reader::getMsg() const {
  return typename Message::Msg::Reader(_reader);
}
inline typename Message::Msg::Builder Message::Builder::getMsg() {
  return typename Message::Msg::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Message::Msg::Pipeline Message::Pipeline::getMsg() {
  return typename Message::Msg::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Message::Msg::Builder Message::Builder::initMsg() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  return typename Message::Msg::Builder(_builder);
}
inline  ::message::Message::Msg::Which Message::Msg::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::message::Message::Msg::Which Message::Msg::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Message::Msg::Reader::isStatus() const {
  return which() == Message::Msg::STATUS;
}
inline bool Message::Msg::Builder::isStatus() {
  return which() == Message::Msg::STATUS;
}
inline bool Message::Msg::Reader::hasStatus() const {
  if (which() != Message::Msg::STATUS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Msg::Builder::hasStatus() {
  if (which() != Message::Msg::STATUS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::message::Status::Reader Message::Msg::Reader::getStatus() const {
  KJ_IREQUIRE((which() == Message::Msg::STATUS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::message::Status>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::message::Status::Builder Message::Msg::Builder::getStatus() {
  KJ_IREQUIRE((which() == Message::Msg::STATUS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::message::Status>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Msg::Builder::setStatus( ::message::Status::Reader value) {
  _builder.setDataField<Message::Msg::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::Msg::STATUS);
  ::capnp::_::PointerHelpers< ::message::Status>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::message::Status::Builder Message::Msg::Builder::initStatus() {
  _builder.setDataField<Message::Msg::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::Msg::STATUS);
  return ::capnp::_::PointerHelpers< ::message::Status>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Msg::Builder::adoptStatus(
    ::capnp::Orphan< ::message::Status>&& value) {
  _builder.setDataField<Message::Msg::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::Msg::STATUS);
  ::capnp::_::PointerHelpers< ::message::Status>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::message::Status> Message::Msg::Builder::disownStatus() {
  KJ_IREQUIRE((which() == Message::Msg::STATUS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::message::Status>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Msg::Reader::isShip() const {
  return which() == Message::Msg::SHIP;
}
inline bool Message::Msg::Builder::isShip() {
  return which() == Message::Msg::SHIP;
}
inline bool Message::Msg::Reader::hasShip() const {
  if (which() != Message::Msg::SHIP) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Msg::Builder::hasShip() {
  if (which() != Message::Msg::SHIP) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::message::Ship::Reader Message::Msg::Reader::getShip() const {
  KJ_IREQUIRE((which() == Message::Msg::SHIP),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::message::Ship>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::message::Ship::Builder Message::Msg::Builder::getShip() {
  KJ_IREQUIRE((which() == Message::Msg::SHIP),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::message::Ship>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Msg::Builder::setShip( ::message::Ship::Reader value) {
  _builder.setDataField<Message::Msg::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::Msg::SHIP);
  ::capnp::_::PointerHelpers< ::message::Ship>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::message::Ship::Builder Message::Msg::Builder::initShip() {
  _builder.setDataField<Message::Msg::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::Msg::SHIP);
  return ::capnp::_::PointerHelpers< ::message::Ship>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Msg::Builder::adoptShip(
    ::capnp::Orphan< ::message::Ship>&& value) {
  _builder.setDataField<Message::Msg::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::Msg::SHIP);
  ::capnp::_::PointerHelpers< ::message::Ship>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::message::Ship> Message::Msg::Builder::disownShip() {
  KJ_IREQUIRE((which() == Message::Msg::SHIP),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::message::Ship>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Msg::Reader::isPart() const {
  return which() == Message::Msg::PART;
}
inline bool Message::Msg::Builder::isPart() {
  return which() == Message::Msg::PART;
}
inline bool Message::Msg::Reader::hasPart() const {
  if (which() != Message::Msg::PART) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Msg::Builder::hasPart() {
  if (which() != Message::Msg::PART) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::message::Part::Reader Message::Msg::Reader::getPart() const {
  KJ_IREQUIRE((which() == Message::Msg::PART),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::message::Part>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::message::Part::Builder Message::Msg::Builder::getPart() {
  KJ_IREQUIRE((which() == Message::Msg::PART),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::message::Part>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Msg::Builder::setPart( ::message::Part::Reader value) {
  _builder.setDataField<Message::Msg::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::Msg::PART);
  ::capnp::_::PointerHelpers< ::message::Part>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::message::Part::Builder Message::Msg::Builder::initPart() {
  _builder.setDataField<Message::Msg::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::Msg::PART);
  return ::capnp::_::PointerHelpers< ::message::Part>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Msg::Builder::adoptPart(
    ::capnp::Orphan< ::message::Part>&& value) {
  _builder.setDataField<Message::Msg::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::Msg::PART);
  ::capnp::_::PointerHelpers< ::message::Part>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::message::Part> Message::Msg::Builder::disownPart() {
  KJ_IREQUIRE((which() == Message::Msg::PART),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::message::Part>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t Status::Reader::getFirmwareVersion() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Status::Builder::getFirmwareVersion() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Status::Builder::setFirmwareVersion( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Status::Reader::hasUser() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Status::Builder::hasUser() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::game::User::Reader Status::Reader::getUser() const {
  return ::capnp::_::PointerHelpers< ::game::User>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::game::User::Builder Status::Builder::getUser() {
  return ::capnp::_::PointerHelpers< ::game::User>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::game::User::Pipeline Status::Pipeline::getUser() {
  return  ::game::User::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Status::Builder::setUser( ::game::User::Reader value) {
  ::capnp::_::PointerHelpers< ::game::User>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::game::User::Builder Status::Builder::initUser() {
  return ::capnp::_::PointerHelpers< ::game::User>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Status::Builder::adoptUser(
    ::capnp::Orphan< ::game::User>&& value) {
  ::capnp::_::PointerHelpers< ::game::User>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::game::User> Status::Builder::disownUser() {
  return ::capnp::_::PointerHelpers< ::game::User>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t Status::Reader::getSite() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Status::Builder::getSite() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Status::Builder::setSite( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Status::Reader::hasPhase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Status::Builder::hasPhase() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::game::Phase::Reader Status::Reader::getPhase() const {
  return ::capnp::_::PointerHelpers< ::game::Phase>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::game::Phase::Builder Status::Builder::getPhase() {
  return ::capnp::_::PointerHelpers< ::game::Phase>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::game::Phase::Pipeline Status::Pipeline::getPhase() {
  return  ::game::Phase::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Status::Builder::setPhase( ::game::Phase::Reader value) {
  ::capnp::_::PointerHelpers< ::game::Phase>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::game::Phase::Builder Status::Builder::initPhase() {
  return ::capnp::_::PointerHelpers< ::game::Phase>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Status::Builder::adoptPhase(
    ::capnp::Orphan< ::game::Phase>&& value) {
  ::capnp::_::PointerHelpers< ::game::Phase>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::game::Phase> Status::Builder::disownPhase() {
  return ::capnp::_::PointerHelpers< ::game::Phase>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint16_t Status::Reader::getScore() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Status::Builder::getScore() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Status::Builder::setScore( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Status::Reader::getReputation() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Status::Builder::getReputation() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Status::Builder::setReputation( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::message::Type Ship::Reader::getAction() const {
  return _reader.getDataField< ::message::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::message::Type Ship::Builder::getAction() {
  return _builder.getDataField< ::message::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Ship::Builder::setAction( ::message::Type value) {
  _builder.setDataField< ::message::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Ship::Reader::hasShip() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Ship::Builder::hasShip() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::game::Ship::Reader Ship::Reader::getShip() const {
  return ::capnp::_::PointerHelpers< ::game::Ship>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::game::Ship::Builder Ship::Builder::getShip() {
  return ::capnp::_::PointerHelpers< ::game::Ship>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::game::Ship::Pipeline Ship::Pipeline::getShip() {
  return  ::game::Ship::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Ship::Builder::setShip( ::game::Ship::Reader value) {
  ::capnp::_::PointerHelpers< ::game::Ship>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::game::Ship::Builder Ship::Builder::initShip() {
  return ::capnp::_::PointerHelpers< ::game::Ship>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Ship::Builder::adoptShip(
    ::capnp::Orphan< ::game::Ship>&& value) {
  ::capnp::_::PointerHelpers< ::game::Ship>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::game::Ship> Ship::Builder::disownShip() {
  return ::capnp::_::PointerHelpers< ::game::Ship>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Ship::Reader::hasDest() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Ship::Builder::hasDest() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::game::User::Reader Ship::Reader::getDest() const {
  return ::capnp::_::PointerHelpers< ::game::User>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::game::User::Builder Ship::Builder::getDest() {
  return ::capnp::_::PointerHelpers< ::game::User>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::game::User::Pipeline Ship::Pipeline::getDest() {
  return  ::game::User::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Ship::Builder::setDest( ::game::User::Reader value) {
  ::capnp::_::PointerHelpers< ::game::User>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::game::User::Builder Ship::Builder::initDest() {
  return ::capnp::_::PointerHelpers< ::game::User>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Ship::Builder::adoptDest(
    ::capnp::Orphan< ::game::User>&& value) {
  ::capnp::_::PointerHelpers< ::game::User>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::game::User> Ship::Builder::disownDest() {
  return ::capnp::_::PointerHelpers< ::game::User>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::message::Type Part::Reader::getAction() const {
  return _reader.getDataField< ::message::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::message::Type Part::Builder::getAction() {
  return _builder.getDataField< ::message::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Part::Builder::setAction( ::message::Type value) {
  _builder.setDataField< ::message::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Part::Reader::hasPart() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Part::Builder::hasPart() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::game::ShipPart::Reader Part::Reader::getPart() const {
  return ::capnp::_::PointerHelpers< ::game::ShipPart>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::game::ShipPart::Builder Part::Builder::getPart() {
  return ::capnp::_::PointerHelpers< ::game::ShipPart>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::game::ShipPart::Pipeline Part::Pipeline::getPart() {
  return  ::game::ShipPart::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Part::Builder::setPart( ::game::ShipPart::Reader value) {
  ::capnp::_::PointerHelpers< ::game::ShipPart>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::game::ShipPart::Builder Part::Builder::initPart() {
  return ::capnp::_::PointerHelpers< ::game::ShipPart>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Part::Builder::adoptPart(
    ::capnp::Orphan< ::game::ShipPart>&& value) {
  ::capnp::_::PointerHelpers< ::game::ShipPart>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::game::ShipPart> Part::Builder::disownPart() {
  return ::capnp::_::PointerHelpers< ::game::ShipPart>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t Part::Reader::getQuality() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Part::Builder::getQuality() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Part::Builder::setQuality( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Part::Reader::hasDest() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Part::Builder::hasDest() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::game::User::Reader Part::Reader::getDest() const {
  return ::capnp::_::PointerHelpers< ::game::User>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::game::User::Builder Part::Builder::getDest() {
  return ::capnp::_::PointerHelpers< ::game::User>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::game::User::Pipeline Part::Pipeline::getDest() {
  return  ::game::User::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Part::Builder::setDest( ::game::User::Reader value) {
  ::capnp::_::PointerHelpers< ::game::User>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::game::User::Builder Part::Builder::initDest() {
  return ::capnp::_::PointerHelpers< ::game::User>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Part::Builder::adoptDest(
    ::capnp::Orphan< ::game::User>&& value) {
  ::capnp::_::PointerHelpers< ::game::User>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::game::User> Part::Builder::disownDest() {
  return ::capnp::_::PointerHelpers< ::game::User>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

}  // namespace

#endif  // CAPNP_INCLUDED_f5750227d1666c0c_
